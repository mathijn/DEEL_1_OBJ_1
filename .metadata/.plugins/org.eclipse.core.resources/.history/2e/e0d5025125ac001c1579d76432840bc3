package yahtzeegui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Rectangle;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JApplet;
import javax.swing.JTextField;

import yahtzee.Yahtzee;

public class YahtzeeApplet extends JApplet {
  //attributen
  
  /**
   * Het huidige yahtzee-spel
   */
  private Yahtzee yahtzee = new Yahtzee();  //  @jve:decl-index=0:
  
  /**
   * Geeft aan welke dobbelstenen in de interface zijn
   * vastgezet: hold[i] = true als de i-de dobbelsteen
   * is vastgezet.
   */
  private boolean[] hold = new boolean[5];
  
  private JTextField[] dobbelVelden = new JTextField[5];
  private JButton[] scoreKnoppen = new JButton[13];
  private JTextField[] scoreVelden = new JTextField[13];

  
  private JPanel jContentPane = null;
  private JButton gooiKnop = null;
  private JButton nieuwSpelKnop = null;
  private JTextField totaalVeld = null;
  private JLabel totaalLabel = null;
  /**
   * This is the xxx default constructor
   */
  public YahtzeeApplet() {
    super();
  }

  /**
   * This method initializes this
   * 
   * @return void
   */
  public void init() {
    this.setSize(300, 400);
    this.setContentPane(getJContentPane());
    mijnInit();
  }
  
  // Initialisatie
  private void mijnInit() {
    initialiseerDobbelVelden();
    initialiseerScoreComponenten();
  }
  
  /**
   * Event handler voor het klikken op de knop Gooi. Vraagt het
   * yahtzee-spel een worp te doen met de stenen die niet vast staan.
   * Toont de gegooide waarden in de dobbelVelden.
   */
  private void gooiKnopAction() {
    yahtzee.werp(hold);
    // disable gooiKnop als het maximum aantal worpen bereikt is
    if (!yahtzee.magWerpen()) {
        gooiKnop.setEnabled(false);
    } 
    // toon de ogen in de dobllevelden
    int[] ogen = yahtzee.getOgen();
    for (int i = 0;  i < 5; i++) {
      dobbelVelden[i].setText(ogen[i] + ""); 
    }
  }
  
  /**
   * Event handler voor klikken op een gegeven dobbelsteenveld.
   * De status van de steen wijzigt daardoor van hold in niet-hold of
   * omgekeerd. 
   * @param i  het nummer van de dobbelsteen 
   * @param veld  het bijbehorende dobbelVeld
   */
  private void dobbelVeldAction(int index) {
    if (!hold[index]) {
      hold[index] = true;
      dobbelVelden[index].setBackground(Color.PINK);
    } else {
      hold[index] = false;
      dobbelVelden[index].setBackground(Color.WHITE);
    }
  }
  
  /**
   * Event handler voor het scoren van een categorie. De keuze wordt
   * doorgegeven aan het yahtzeespel, de score en de nieuwe totaalscore
   * worden getoond en de gekozen knop wordt disabled. 
   * Omdat de beurt hiermee is afgelopen, worden ook de dobbelsteenvelden geleegd 
   * en de gooiKnop weer enabled (tenzij het spel is afgelopen).
   * @param keuze  het nummer van de gekozen categorie
   * @param scoreVeld  het bijbehorende scoreveld 
   * @param keuzeKnop  de bijbehorende knop
   */
  private void scoreKnopAction(int keuze) {
    if (yahtzee.magKiezen(keuze)) {
      yahtzee.kies(keuze);
      scoreVelden[keuze].setText(yahtzee.getScore(keuze) + "");
      totaalVeld.setText(yahtzee.getTotaalScore() + "");   
      resetDobbelstenen();
      scoreKnoppen[keuze].setEnabled(false);
    }
  }

  /**
   * Event handler voor klikken op Nieuw spel.
   * Er wordt een nieuw Yahtzee-spel gecreëerd en de gui
   * wordt in de begintoestand teruggebracht
   */
  private void nieuwSpelKnopAction() {
    yahtzee = new Yahtzee();
    hold = new boolean[5];
    resetDobbelstenen();
    resetScoreComponenten();
    totaalVeld.setText("");
  }
  
  /**
   * Hulpmethode voor het legen van de dobbelvelden,
   * het enablen van de gooiKnop als het spel nog niet is
   * afgelopen en het disablen als dat wel het geval is.
   */
  private void resetDobbelstenen() {
    for (JTextField dobbelVeld: dobbelVelden) {
      dobbelVeld.setText("");
      dobbelVeld.setBackground(Color.WHITE);
    }
    gooiKnop.setEnabled(yahtzee.magWerpen());
    hold = new boolean[5];
  }
  
  /**
   * Hulpmethode die alle velden in de interface leeg maakt 
   * en alle knoppen weer enabled.
   * Deze methode kan met alleen de kennis uit OPiJ 1 niet
   * geschreven worden.
   */
  private void resetScoreComponenten() {
    for (int i=0; i < 13; i++) {
      scoreVelden[i].setText("");
      scoreKnoppen[i].setEnabled(true);
    }
  }

  
  private void initialiseerDobbelVelden() {
    for (int i = 0; i < 5; i++) {
      dobbelVelden[i] = new JTextField();
      dobbelVelden[i].setBounds(8 + 58*i, 16, 50, 50);
      dobbelVelden[i].setFont(new Font("Dialog", Font.BOLD, 24));
      dobbelVelden[i].setForeground(Color.BLUE);
      dobbelVelden[i].setBackground(Color.WHITE);   
      dobbelVelden[i].setEditable(false);
      dobbelVelden[i].addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent e) {
          JTextField bron = (JTextField)e.getSource();
          int nummer = (bron.getX() - 8) / 58; 
          dobbelVeldAction(nummer);
        }
      });
      jContentPane.add(dobbelVelden[i]);
    }
  }

  private void initialiseerScoreComponenten() {
    String[] opschriften = {"enen", "tweeën", "drieën", "vieren", "vijven", "zessen",
                            "3 dezelfde", "carré", "full house", 
                            "kleine str.", "grote str.", "YAHTZEE!", "chance"};
    for (int i = 0; i < 13; i++) {
      int xVeld = (i < 6 ? 114 : 163);
      int yVeldEnKnop = (i < 6 ? 133 + 27*i : 133 + 27* (i-6));
      scoreVelden[i] = new JTextField();
      scoreVelden[i].setBounds(xVeld, yVeldEnKnop, 24, 24);
      scoreVelden[i].setFont(new Font("Dialog", Font.BOLD, 14));
      scoreVelden[i].setForeground(Color.blue);
      scoreVelden[i].setEnabled(true);
      scoreVelden[i].setEditable(false);
      scoreVelden[i].setBackground(Color.white);
      scoreVelden[i].setText("");
      
      int xKnop = (i < 6 ? 16 : 194);
      scoreKnoppen[i] = new JButton();
      scoreKnoppen[i].setBounds(xKnop, yVeldEnKnop, 92, 24);
      scoreKnoppen[i].setText(opschriften[i]);
      scoreKnoppen[i].addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent e) {
          JButton bron = (JButton)e.getSource();
          int nummer = (bron.getY() - 133) / 27;
          if (bron.getX() > 100) {
            nummer = nummer + 6;
          }
          scoreKnopAction(nummer);
        }
      });
      
      jContentPane.add(scoreVelden[i]);
      jContentPane.add(scoreKnoppen[i]);
    }
  }
  
  /**
   * This method initializes jContentPane
   * 
   * @return javax.swing.JPanel
   */
  private JPanel getJContentPane() {
    if (jContentPane == null) {
      totaalLabel = new JLabel();
      totaalLabel.setBounds(new Rectangle(17, 295, 67, 25));
      totaalLabel.setText("TOTAAL");    
      jContentPane = new JPanel();
      jContentPane.setLayout(null);
      jContentPane.add(getGooiKnop(), null);
      jContentPane.add(getNieuwSpelKnop(), null);
      jContentPane.add(getTotaalVeld(), null);
      jContentPane.add(totaalLabel, null);
    }
    return jContentPane;
  }
  
  /**
   * This method initializes gooiKnop   
   *    
   * @return javax.swing.JButton        
   */
  private JButton getGooiKnop() {
    if (gooiKnop == null) {
      gooiKnop = new JButton();
      gooiKnop.setBounds(new Rectangle(96, 75, 99, 34));
      gooiKnop.setText("Gooi");
      gooiKnop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent e) {
          gooiKnopAction();
        }
      });
    }
    return gooiKnop;
  }  
  /**
   * This method initializes nieuwSpelKnop      
   *    
   * @return javax.swing.JButton        
   */
  private JButton getNieuwSpelKnop() {
    if (nieuwSpelKnop == null) {
      nieuwSpelKnop = new JButton();
      nieuwSpelKnop.setBounds(new Rectangle(96, 355, 99, 34));
      nieuwSpelKnop.setText("Nieuw spel");
      nieuwSpelKnop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent e) {
          nieuwSpelKnopAction();
        }
      });
    }
    return nieuwSpelKnop;
  }

  /**
   * This method initializes totaalVeld 
   *    
   * @return javax.swing.JTextField     
   */
  private JTextField getTotaalVeld() {
    if (totaalVeld == null) {
      totaalVeld = new JTextField();
      totaalVeld.setBounds(new Rectangle(85, 295, 53, 25));
      totaalVeld.setForeground(Color.red);
      totaalVeld.setEditable(false);
      totaalVeld.setBackground(Color.white);
      totaalVeld.setFont(new Font("Dialog", Font.BOLD, 14));
    }
    return totaalVeld;
  }
}
